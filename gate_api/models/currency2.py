# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.   # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class Currency2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'name': 'str',
        'chain': 'str',
        'address': 'str',
        'amount_precision': 'int',
        'precision': 'int',
        'status': 'int'
    }

    attribute_map = {
        'currency': 'currency',
        'name': 'name',
        'chain': 'chain',
        'address': 'address',
        'amount_precision': 'amount_precision',
        'precision': 'precision',
        'status': 'status'
    }

    def __init__(self, currency=None, name=None, chain=None, address=None, amount_precision=None, precision=None, status=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, str, str, int, int, int, Configuration) -> None
        """Currency2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._name = None
        self._chain = None
        self._address = None
        self._amount_precision = None
        self._precision = None
        self._status = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if name is not None:
            self.name = name
        if chain is not None:
            self.chain = chain
        if address is not None:
            self.address = address
        if amount_precision is not None:
            self.amount_precision = amount_precision
        if precision is not None:
            self.precision = precision
        if status is not None:
            self.status = status

    @property
    def currency(self):
        """Gets the currency of this Currency2.  # noqa: E501

        Currency symbol  # noqa: E501

        :return: The currency of this Currency2.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Currency2.

        Currency symbol  # noqa: E501

        :param currency: The currency of this Currency2.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this Currency2.  # noqa: E501

        Currency name  # noqa: E501

        :return: The name of this Currency2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency2.

        Currency name  # noqa: E501

        :param name: The name of this Currency2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def chain(self):
        """Gets the chain of this Currency2.  # noqa: E501

        The main chain corresponding to the coin  # noqa: E501

        :return: The chain of this Currency2.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this Currency2.

        The main chain corresponding to the coin  # noqa: E501

        :param chain: The chain of this Currency2.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def address(self):
        """Gets the address of this Currency2.  # noqa: E501

        Contract Address  # noqa: E501

        :return: The address of this Currency2.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Currency2.

        Contract Address  # noqa: E501

        :param address: The address of this Currency2.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def amount_precision(self):
        """Gets the amount_precision of this Currency2.  # noqa: E501

        Amount scale  # noqa: E501

        :return: The amount_precision of this Currency2.  # noqa: E501
        :rtype: int
        """
        return self._amount_precision

    @amount_precision.setter
    def amount_precision(self, amount_precision):
        """Sets the amount_precision of this Currency2.

        Amount scale  # noqa: E501

        :param amount_precision: The amount_precision of this Currency2.  # noqa: E501
        :type: int
        """

        self._amount_precision = amount_precision

    @property
    def precision(self):
        """Gets the precision of this Currency2.  # noqa: E501

        Price scale  # noqa: E501

        :return: The precision of this Currency2.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this Currency2.

        Price scale  # noqa: E501

        :param precision: The precision of this Currency2.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def status(self):
        """Gets the status of this Currency2.  # noqa: E501

        币种交易状态 - `1` : 正常交易 - `2` : 暂停交易 - `3` : 下架  # noqa: E501

        :return: The status of this Currency2.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Currency2.

        币种交易状态 - `1` : 正常交易 - `2` : 暂停交易 - `3` : 下架  # noqa: E501

        :param status: The status of this Currency2.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Currency2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Currency2):
            return True

        return self.to_dict() != other.to_dict()
