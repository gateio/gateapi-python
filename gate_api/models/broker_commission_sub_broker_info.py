# coding: utf-8

"""
    Gate API

    Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.  # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class BrokerCommissionSubBrokerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'original_commission_rate': 'str',
        'relative_commission_rate': 'str',
        'commission_rate': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'original_commission_rate': 'original_commission_rate',
        'relative_commission_rate': 'relative_commission_rate',
        'commission_rate': 'commission_rate'
    }

    def __init__(self, user_id=None, original_commission_rate=None, relative_commission_rate=None, commission_rate=None, local_vars_configuration=None):  # noqa: E501
        # type: (int, str, str, str, Configuration) -> None
        """BrokerCommissionSubBrokerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._original_commission_rate = None
        self._relative_commission_rate = None
        self._commission_rate = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if original_commission_rate is not None:
            self.original_commission_rate = original_commission_rate
        if relative_commission_rate is not None:
            self.relative_commission_rate = relative_commission_rate
        if commission_rate is not None:
            self.commission_rate = commission_rate

    @property
    def user_id(self):
        """Gets the user_id of this BrokerCommissionSubBrokerInfo.  # noqa: E501

        Sub-broker user ID  # noqa: E501

        :return: The user_id of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BrokerCommissionSubBrokerInfo.

        Sub-broker user ID  # noqa: E501

        :param user_id: The user_id of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def original_commission_rate(self):
        """Gets the original_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501

        Sub-broker original commission rate  # noqa: E501

        :return: The original_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :rtype: str
        """
        return self._original_commission_rate

    @original_commission_rate.setter
    def original_commission_rate(self, original_commission_rate):
        """Sets the original_commission_rate of this BrokerCommissionSubBrokerInfo.

        Sub-broker original commission rate  # noqa: E501

        :param original_commission_rate: The original_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :type: str
        """

        self._original_commission_rate = original_commission_rate

    @property
    def relative_commission_rate(self):
        """Gets the relative_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501

        Sub-broker relative commission rate  # noqa: E501

        :return: The relative_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :rtype: str
        """
        return self._relative_commission_rate

    @relative_commission_rate.setter
    def relative_commission_rate(self, relative_commission_rate):
        """Sets the relative_commission_rate of this BrokerCommissionSubBrokerInfo.

        Sub-broker relative commission rate  # noqa: E501

        :param relative_commission_rate: The relative_commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :type: str
        """

        self._relative_commission_rate = relative_commission_rate

    @property
    def commission_rate(self):
        """Gets the commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501

        Sub-broker actual commission rate  # noqa: E501

        :return: The commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :rtype: str
        """
        return self._commission_rate

    @commission_rate.setter
    def commission_rate(self, commission_rate):
        """Sets the commission_rate of this BrokerCommissionSubBrokerInfo.

        Sub-broker actual commission rate  # noqa: E501

        :param commission_rate: The commission_rate of this BrokerCommissionSubBrokerInfo.  # noqa: E501
        :type: str
        """

        self._commission_rate = commission_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrokerCommissionSubBrokerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrokerCommissionSubBrokerInfo):
            return True

        return self.to_dict() != other.to_dict()
