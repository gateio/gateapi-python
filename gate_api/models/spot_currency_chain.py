# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class SpotCurrencyChain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'addr': 'str',
        'withdraw_disabled': 'bool',
        'withdraw_delayed': 'bool',
        'deposit_disabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'addr': 'addr',
        'withdraw_disabled': 'withdraw_disabled',
        'withdraw_delayed': 'withdraw_delayed',
        'deposit_disabled': 'deposit_disabled'
    }

    def __init__(self, name=None, addr=None, withdraw_disabled=None, withdraw_delayed=None, deposit_disabled=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, bool, bool, bool, Configuration) -> None
        """SpotCurrencyChain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._addr = None
        self._withdraw_disabled = None
        self._withdraw_delayed = None
        self._deposit_disabled = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if addr is not None:
            self.addr = addr
        if withdraw_disabled is not None:
            self.withdraw_disabled = withdraw_disabled
        if withdraw_delayed is not None:
            self.withdraw_delayed = withdraw_delayed
        if deposit_disabled is not None:
            self.deposit_disabled = deposit_disabled

    @property
    def name(self):
        """Gets the name of this SpotCurrencyChain.  # noqa: E501

        Chain name  # noqa: E501

        :return: The name of this SpotCurrencyChain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpotCurrencyChain.

        Chain name  # noqa: E501

        :param name: The name of this SpotCurrencyChain.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def addr(self):
        """Gets the addr of this SpotCurrencyChain.  # noqa: E501

        token address  # noqa: E501

        :return: The addr of this SpotCurrencyChain.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this SpotCurrencyChain.

        token address  # noqa: E501

        :param addr: The addr of this SpotCurrencyChain.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def withdraw_disabled(self):
        """Gets the withdraw_disabled of this SpotCurrencyChain.  # noqa: E501

        Whether currency's withdrawal is disabled  # noqa: E501

        :return: The withdraw_disabled of this SpotCurrencyChain.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_disabled

    @withdraw_disabled.setter
    def withdraw_disabled(self, withdraw_disabled):
        """Sets the withdraw_disabled of this SpotCurrencyChain.

        Whether currency's withdrawal is disabled  # noqa: E501

        :param withdraw_disabled: The withdraw_disabled of this SpotCurrencyChain.  # noqa: E501
        :type: bool
        """

        self._withdraw_disabled = withdraw_disabled

    @property
    def withdraw_delayed(self):
        """Gets the withdraw_delayed of this SpotCurrencyChain.  # noqa: E501

        Whether currency's withdrawal is delayed  # noqa: E501

        :return: The withdraw_delayed of this SpotCurrencyChain.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_delayed

    @withdraw_delayed.setter
    def withdraw_delayed(self, withdraw_delayed):
        """Sets the withdraw_delayed of this SpotCurrencyChain.

        Whether currency's withdrawal is delayed  # noqa: E501

        :param withdraw_delayed: The withdraw_delayed of this SpotCurrencyChain.  # noqa: E501
        :type: bool
        """

        self._withdraw_delayed = withdraw_delayed

    @property
    def deposit_disabled(self):
        """Gets the deposit_disabled of this SpotCurrencyChain.  # noqa: E501

        Whether currency's deposit is disabled  # noqa: E501

        :return: The deposit_disabled of this SpotCurrencyChain.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_disabled

    @deposit_disabled.setter
    def deposit_disabled(self, deposit_disabled):
        """Sets the deposit_disabled of this SpotCurrencyChain.

        Whether currency's deposit is disabled  # noqa: E501

        :param deposit_disabled: The deposit_disabled of this SpotCurrencyChain.  # noqa: E501
        :type: bool
        """

        self._deposit_disabled = deposit_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpotCurrencyChain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpotCurrencyChain):
            return True

        return self.to_dict() != other.to_dict()
