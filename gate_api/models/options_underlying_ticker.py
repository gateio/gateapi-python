# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class OptionsUnderlyingTicker(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trade_put': 'int',
        'trade_call': 'int',
        'index_price': 'str'
    }

    attribute_map = {
        'trade_put': 'trade_put',
        'trade_call': 'trade_call',
        'index_price': 'index_price'
    }

    def __init__(self, trade_put=None, trade_call=None, index_price=None, local_vars_configuration=None):  # noqa: E501
        # type: (int, int, str, Configuration) -> None
        """OptionsUnderlyingTicker - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trade_put = None
        self._trade_call = None
        self._index_price = None
        self.discriminator = None

        if trade_put is not None:
            self.trade_put = trade_put
        if trade_call is not None:
            self.trade_call = trade_call
        if index_price is not None:
            self.index_price = index_price

    @property
    def trade_put(self):
        """Gets the trade_put of this OptionsUnderlyingTicker.  # noqa: E501

        Total put options trades amount in last 24h  # noqa: E501

        :return: The trade_put of this OptionsUnderlyingTicker.  # noqa: E501
        :rtype: int
        """
        return self._trade_put

    @trade_put.setter
    def trade_put(self, trade_put):
        """Sets the trade_put of this OptionsUnderlyingTicker.

        Total put options trades amount in last 24h  # noqa: E501

        :param trade_put: The trade_put of this OptionsUnderlyingTicker.  # noqa: E501
        :type: int
        """

        self._trade_put = trade_put

    @property
    def trade_call(self):
        """Gets the trade_call of this OptionsUnderlyingTicker.  # noqa: E501

        Total call options trades amount in last 24h  # noqa: E501

        :return: The trade_call of this OptionsUnderlyingTicker.  # noqa: E501
        :rtype: int
        """
        return self._trade_call

    @trade_call.setter
    def trade_call(self, trade_call):
        """Sets the trade_call of this OptionsUnderlyingTicker.

        Total call options trades amount in last 24h  # noqa: E501

        :param trade_call: The trade_call of this OptionsUnderlyingTicker.  # noqa: E501
        :type: int
        """

        self._trade_call = trade_call

    @property
    def index_price(self):
        """Gets the index_price of this OptionsUnderlyingTicker.  # noqa: E501

        Index price (quote currency)  # noqa: E501

        :return: The index_price of this OptionsUnderlyingTicker.  # noqa: E501
        :rtype: str
        """
        return self._index_price

    @index_price.setter
    def index_price(self, index_price):
        """Sets the index_price of this OptionsUnderlyingTicker.

        Index price (quote currency)  # noqa: E501

        :param index_price: The index_price of this OptionsUnderlyingTicker.  # noqa: E501
        :type: str
        """

        self._index_price = index_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionsUnderlyingTicker):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptionsUnderlyingTicker):
            return True

        return self.to_dict() != other.to_dict()
