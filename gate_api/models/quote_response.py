# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.   # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class QuoteResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'quote_id': 'str',
        'min_amount': 'str',
        'max_amount': 'str',
        'price': 'str',
        'slippage': 'str',
        'estimate_gas_fee_amount_usdt': 'str',
        'order_fee': 'str',
        'target_token_min_amount': 'str',
        'target_token_max_amount': 'str',
        'error_type': 'int'
    }

    attribute_map = {
        'quote_id': 'quote_id',
        'min_amount': 'min_amount',
        'max_amount': 'max_amount',
        'price': 'price',
        'slippage': 'slippage',
        'estimate_gas_fee_amount_usdt': 'estimate_gas_fee_amount_usdt',
        'order_fee': 'order_fee',
        'target_token_min_amount': 'target_token_min_amount',
        'target_token_max_amount': 'target_token_max_amount',
        'error_type': 'error_type'
    }

    def __init__(self, quote_id=None, min_amount=None, max_amount=None, price=None, slippage=None, estimate_gas_fee_amount_usdt=None, order_fee=None, target_token_min_amount=None, target_token_max_amount=None, error_type=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, str, str, str, str, str, str, str, int, Configuration) -> None
        """QuoteResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._quote_id = None
        self._min_amount = None
        self._max_amount = None
        self._price = None
        self._slippage = None
        self._estimate_gas_fee_amount_usdt = None
        self._order_fee = None
        self._target_token_min_amount = None
        self._target_token_max_amount = None
        self._error_type = None
        self.discriminator = None

        if quote_id is not None:
            self.quote_id = quote_id
        if min_amount is not None:
            self.min_amount = min_amount
        if max_amount is not None:
            self.max_amount = max_amount
        if price is not None:
            self.price = price
        if slippage is not None:
            self.slippage = slippage
        if estimate_gas_fee_amount_usdt is not None:
            self.estimate_gas_fee_amount_usdt = estimate_gas_fee_amount_usdt
        if order_fee is not None:
            self.order_fee = order_fee
        if target_token_min_amount is not None:
            self.target_token_min_amount = target_token_min_amount
        if target_token_max_amount is not None:
            self.target_token_max_amount = target_token_max_amount
        if error_type is not None:
            self.error_type = error_type

    @property
    def quote_id(self):
        """Gets the quote_id of this QuoteResponse.  # noqa: E501

        The quotation ID (quote_id) is used for placing orders and is valid for 1 minute  # noqa: E501

        :return: The quote_id of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this QuoteResponse.

        The quotation ID (quote_id) is used for placing orders and is valid for 1 minute  # noqa: E501

        :param quote_id: The quote_id of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._quote_id = quote_id

    @property
    def min_amount(self):
        """Gets the min_amount of this QuoteResponse.  # noqa: E501

        最小下单量  # noqa: E501

        :return: The min_amount of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this QuoteResponse.

        最小下单量  # noqa: E501

        :param min_amount: The min_amount of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._min_amount = min_amount

    @property
    def max_amount(self):
        """Gets the max_amount of this QuoteResponse.  # noqa: E501

        最大下单量  # noqa: E501

        :return: The max_amount of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this QuoteResponse.

        最大下单量  # noqa: E501

        :param max_amount: The max_amount of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._max_amount = max_amount

    @property
    def price(self):
        """Gets the price of this QuoteResponse.  # noqa: E501

        Coin Price (USDT-based)  # noqa: E501

        :return: The price of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this QuoteResponse.

        Coin Price (USDT-based)  # noqa: E501

        :param price: The price of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def slippage(self):
        """Gets the slippage of this QuoteResponse.  # noqa: E501

        Slippage  # noqa: E501

        :return: The slippage of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._slippage

    @slippage.setter
    def slippage(self, slippage):
        """Sets the slippage of this QuoteResponse.

        Slippage  # noqa: E501

        :param slippage: The slippage of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._slippage = slippage

    @property
    def estimate_gas_fee_amount_usdt(self):
        """Gets the estimate_gas_fee_amount_usdt of this QuoteResponse.  # noqa: E501

        Estimated Network Fee (USDT-based)  # noqa: E501

        :return: The estimate_gas_fee_amount_usdt of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._estimate_gas_fee_amount_usdt

    @estimate_gas_fee_amount_usdt.setter
    def estimate_gas_fee_amount_usdt(self, estimate_gas_fee_amount_usdt):
        """Sets the estimate_gas_fee_amount_usdt of this QuoteResponse.

        Estimated Network Fee (USDT-based)  # noqa: E501

        :param estimate_gas_fee_amount_usdt: The estimate_gas_fee_amount_usdt of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._estimate_gas_fee_amount_usdt = estimate_gas_fee_amount_usdt

    @property
    def order_fee(self):
        """Gets the order_fee of this QuoteResponse.  # noqa: E501

        Slippage value of 10 represents a 10% tolerance  # noqa: E501

        :return: The order_fee of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_fee

    @order_fee.setter
    def order_fee(self, order_fee):
        """Sets the order_fee of this QuoteResponse.

        Slippage value of 10 represents a 10% tolerance  # noqa: E501

        :param order_fee: The order_fee of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._order_fee = order_fee

    @property
    def target_token_min_amount(self):
        """Gets the target_token_min_amount of this QuoteResponse.  # noqa: E501

        最小获得数量  # noqa: E501

        :return: The target_token_min_amount of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_token_min_amount

    @target_token_min_amount.setter
    def target_token_min_amount(self, target_token_min_amount):
        """Sets the target_token_min_amount of this QuoteResponse.

        最小获得数量  # noqa: E501

        :param target_token_min_amount: The target_token_min_amount of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._target_token_min_amount = target_token_min_amount

    @property
    def target_token_max_amount(self):
        """Gets the target_token_max_amount of this QuoteResponse.  # noqa: E501

        最大获得数量  # noqa: E501

        :return: The target_token_max_amount of this QuoteResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_token_max_amount

    @target_token_max_amount.setter
    def target_token_max_amount(self, target_token_max_amount):
        """Sets the target_token_max_amount of this QuoteResponse.

        最大获得数量  # noqa: E501

        :param target_token_max_amount: The target_token_max_amount of this QuoteResponse.  # noqa: E501
        :type: str
        """

        self._target_token_max_amount = target_token_max_amount

    @property
    def error_type(self):
        """Gets the error_type of this QuoteResponse.  # noqa: E501

        Failure Type - `0` : Success - `1` : Exceeds maximum value - `2` : Below minimum value  # noqa: E501

        :return: The error_type of this QuoteResponse.  # noqa: E501
        :rtype: int
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this QuoteResponse.

        Failure Type - `0` : Success - `1` : Exceeds maximum value - `2` : Below minimum value  # noqa: E501

        :param error_type: The error_type of this QuoteResponse.  # noqa: E501
        :type: int
        """

        self._error_type = error_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuoteResponse):
            return True

        return self.to_dict() != other.to_dict()
