# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class StructuredGetProjectList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'name_en': 'str',
        'investment_coin': 'str',
        'investment_period': 'str',
        'min_annual_rate': 'str',
        'mid_annual_rate': 'str',
        'max_annual_rate': 'str',
        'watch_market': 'str',
        'start_time': 'int',
        'end_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name_en': 'name_en',
        'investment_coin': 'investment_coin',
        'investment_period': 'investment_period',
        'min_annual_rate': 'min_annual_rate',
        'mid_annual_rate': 'mid_annual_rate',
        'max_annual_rate': 'max_annual_rate',
        'watch_market': 'watch_market',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'status': 'status'
    }

    def __init__(self, id=None, type=None, name_en=None, investment_coin=None, investment_period=None, min_annual_rate=None, mid_annual_rate=None, max_annual_rate=None, watch_market=None, start_time=None, end_time=None, status=None, local_vars_configuration=None):  # noqa: E501
        # type: (int, str, str, str, str, str, str, str, str, int, int, str, Configuration) -> None
        """StructuredGetProjectList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._name_en = None
        self._investment_coin = None
        self._investment_period = None
        self._min_annual_rate = None
        self._mid_annual_rate = None
        self._max_annual_rate = None
        self._watch_market = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name_en is not None:
            self.name_en = name_en
        if investment_coin is not None:
            self.investment_coin = investment_coin
        if investment_period is not None:
            self.investment_period = investment_period
        if min_annual_rate is not None:
            self.min_annual_rate = min_annual_rate
        if mid_annual_rate is not None:
            self.mid_annual_rate = mid_annual_rate
        if max_annual_rate is not None:
            self.max_annual_rate = max_annual_rate
        if watch_market is not None:
            self.watch_market = watch_market
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this StructuredGetProjectList.  # noqa: E501

        Plan ID  # noqa: E501

        :return: The id of this StructuredGetProjectList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StructuredGetProjectList.

        Plan ID  # noqa: E501

        :param id: The id of this StructuredGetProjectList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this StructuredGetProjectList.  # noqa: E501

        product type:   `SharkFin2.0`-Shark Fin2.0  `BullishSharkFin`-Bullish Shark Fin  `BearishSharkFin`-Bearish Shark Fin `DoubleNoTouch`-Double No-Touch `RangeAccrual`-Range Accrual `SnowBall`-Snow Ball  # noqa: E501

        :return: The type of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StructuredGetProjectList.

        product type:   `SharkFin2.0`-Shark Fin2.0  `BullishSharkFin`-Bullish Shark Fin  `BearishSharkFin`-Bearish Shark Fin `DoubleNoTouch`-Double No-Touch `RangeAccrual`-Range Accrual `SnowBall`-Snow Ball  # noqa: E501

        :param type: The type of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name_en(self):
        """Gets the name_en of this StructuredGetProjectList.  # noqa: E501

        name  # noqa: E501

        :return: The name_en of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """Sets the name_en of this StructuredGetProjectList.

        name  # noqa: E501

        :param name_en: The name_en of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._name_en = name_en

    @property
    def investment_coin(self):
        """Gets the investment_coin of this StructuredGetProjectList.  # noqa: E501

        Investment Currency  # noqa: E501

        :return: The investment_coin of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._investment_coin

    @investment_coin.setter
    def investment_coin(self, investment_coin):
        """Sets the investment_coin of this StructuredGetProjectList.

        Investment Currency  # noqa: E501

        :param investment_coin: The investment_coin of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._investment_coin = investment_coin

    @property
    def investment_period(self):
        """Gets the investment_period of this StructuredGetProjectList.  # noqa: E501

        Investment term  # noqa: E501

        :return: The investment_period of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._investment_period

    @investment_period.setter
    def investment_period(self, investment_period):
        """Sets the investment_period of this StructuredGetProjectList.

        Investment term  # noqa: E501

        :param investment_period: The investment_period of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._investment_period = investment_period

    @property
    def min_annual_rate(self):
        """Gets the min_annual_rate of this StructuredGetProjectList.  # noqa: E501

        Minimum annual rate  # noqa: E501

        :return: The min_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._min_annual_rate

    @min_annual_rate.setter
    def min_annual_rate(self, min_annual_rate):
        """Sets the min_annual_rate of this StructuredGetProjectList.

        Minimum annual rate  # noqa: E501

        :param min_annual_rate: The min_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._min_annual_rate = min_annual_rate

    @property
    def mid_annual_rate(self):
        """Gets the mid_annual_rate of this StructuredGetProjectList.  # noqa: E501

        Intermediate annual rate  # noqa: E501

        :return: The mid_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._mid_annual_rate

    @mid_annual_rate.setter
    def mid_annual_rate(self, mid_annual_rate):
        """Sets the mid_annual_rate of this StructuredGetProjectList.

        Intermediate annual rate  # noqa: E501

        :param mid_annual_rate: The mid_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._mid_annual_rate = mid_annual_rate

    @property
    def max_annual_rate(self):
        """Gets the max_annual_rate of this StructuredGetProjectList.  # noqa: E501

        Maximum annual rate  # noqa: E501

        :return: The max_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._max_annual_rate

    @max_annual_rate.setter
    def max_annual_rate(self, max_annual_rate):
        """Sets the max_annual_rate of this StructuredGetProjectList.

        Maximum annual rate  # noqa: E501

        :param max_annual_rate: The max_annual_rate of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._max_annual_rate = max_annual_rate

    @property
    def watch_market(self):
        """Gets the watch_market of this StructuredGetProjectList.  # noqa: E501

        Watch market  # noqa: E501

        :return: The watch_market of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._watch_market

    @watch_market.setter
    def watch_market(self, watch_market):
        """Sets the watch_market of this StructuredGetProjectList.

        Watch market  # noqa: E501

        :param watch_market: The watch_market of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._watch_market = watch_market

    @property
    def start_time(self):
        """Gets the start_time of this StructuredGetProjectList.  # noqa: E501

        start time  # noqa: E501

        :return: The start_time of this StructuredGetProjectList.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StructuredGetProjectList.

        start time  # noqa: E501

        :param start_time: The start_time of this StructuredGetProjectList.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this StructuredGetProjectList.  # noqa: E501

        Finished time  # noqa: E501

        :return: The end_time of this StructuredGetProjectList.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StructuredGetProjectList.

        Finished time  # noqa: E501

        :param end_time: The end_time of this StructuredGetProjectList.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this StructuredGetProjectList.  # noqa: E501

        Status:   `in_process`-in progress  `will_begin`-will begin  `wait_settlement`-waiting for settlement  `done`-done  # noqa: E501

        :return: The status of this StructuredGetProjectList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StructuredGetProjectList.

        Status:   `in_process`-in progress  `will_begin`-will begin  `wait_settlement`-waiting for settlement  `done`-done  # noqa: E501

        :param status: The status of this StructuredGetProjectList.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuredGetProjectList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StructuredGetProjectList):
            return True

        return self.to_dict() != other.to_dict()
