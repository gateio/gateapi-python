# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.   # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class Ticker2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'last': 'str',
        'change': 'str',
        'volume': 'str',
        'market_cap': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'last': 'last',
        'change': 'change',
        'volume': 'volume',
        'market_cap': 'market_cap'
    }

    def __init__(self, currency=None, last=None, change=None, volume=None, market_cap=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, str, str, str, Configuration) -> None
        """Ticker2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._last = None
        self._change = None
        self._volume = None
        self._market_cap = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if last is not None:
            self.last = last
        if change is not None:
            self.change = change
        if volume is not None:
            self.volume = volume
        if market_cap is not None:
            self.market_cap = market_cap

    @property
    def currency(self):
        """Gets the currency of this Ticker2.  # noqa: E501

        Currency symbol  # noqa: E501

        :return: The currency of this Ticker2.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Ticker2.

        Currency symbol  # noqa: E501

        :param currency: The currency of this Ticker2.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def last(self):
        """Gets the last of this Ticker2.  # noqa: E501

        Last trading price  # noqa: E501

        :return: The last of this Ticker2.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Ticker2.

        Last trading price  # noqa: E501

        :param last: The last of this Ticker2.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def change(self):
        """Gets the change of this Ticker2.  # noqa: E501

        Change percentage in the last 24h  # noqa: E501

        :return: The change of this Ticker2.  # noqa: E501
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this Ticker2.

        Change percentage in the last 24h  # noqa: E501

        :param change: The change of this Ticker2.  # noqa: E501
        :type: str
        """

        self._change = change

    @property
    def volume(self):
        """Gets the volume of this Ticker2.  # noqa: E501

        24h Trading Volume (USDT)  # noqa: E501

        :return: The volume of this Ticker2.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Ticker2.

        24h Trading Volume (USDT)  # noqa: E501

        :param volume: The volume of this Ticker2.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def market_cap(self):
        """Gets the market_cap of this Ticker2.  # noqa: E501

        Current Coin Market Value  # noqa: E501

        :return: The market_cap of this Ticker2.  # noqa: E501
        :rtype: str
        """
        return self._market_cap

    @market_cap.setter
    def market_cap(self, market_cap):
        """Sets the market_cap of this Ticker2.

        Current Coin Market Value  # noqa: E501

        :param market_cap: The market_cap of this Ticker2.  # noqa: E501
        :type: str
        """

        self._market_cap = market_cap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticker2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ticker2):
            return True

        return self.to_dict() != other.to_dict()
