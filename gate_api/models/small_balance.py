# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class SmallBalance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'available_balance': 'str',
        'estimated_as_btc': 'str',
        'convertible_to_gt': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'available_balance': 'available_balance',
        'estimated_as_btc': 'estimated_as_btc',
        'convertible_to_gt': 'convertible_to_gt'
    }

    def __init__(self, currency=None, available_balance=None, estimated_as_btc=None, convertible_to_gt=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, str, str, Configuration) -> None
        """SmallBalance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._available_balance = None
        self._estimated_as_btc = None
        self._convertible_to_gt = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if available_balance is not None:
            self.available_balance = available_balance
        if estimated_as_btc is not None:
            self.estimated_as_btc = estimated_as_btc
        if convertible_to_gt is not None:
            self.convertible_to_gt = convertible_to_gt

    @property
    def currency(self):
        """Gets the currency of this SmallBalance.  # noqa: E501

        Currency  # noqa: E501

        :return: The currency of this SmallBalance.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SmallBalance.

        Currency  # noqa: E501

        :param currency: The currency of this SmallBalance.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def available_balance(self):
        """Gets the available_balance of this SmallBalance.  # noqa: E501

        Available balance  # noqa: E501

        :return: The available_balance of this SmallBalance.  # noqa: E501
        :rtype: str
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this SmallBalance.

        Available balance  # noqa: E501

        :param available_balance: The available_balance of this SmallBalance.  # noqa: E501
        :type: str
        """

        self._available_balance = available_balance

    @property
    def estimated_as_btc(self):
        """Gets the estimated_as_btc of this SmallBalance.  # noqa: E501

        Estimated as BTC  # noqa: E501

        :return: The estimated_as_btc of this SmallBalance.  # noqa: E501
        :rtype: str
        """
        return self._estimated_as_btc

    @estimated_as_btc.setter
    def estimated_as_btc(self, estimated_as_btc):
        """Sets the estimated_as_btc of this SmallBalance.

        Estimated as BTC  # noqa: E501

        :param estimated_as_btc: The estimated_as_btc of this SmallBalance.  # noqa: E501
        :type: str
        """

        self._estimated_as_btc = estimated_as_btc

    @property
    def convertible_to_gt(self):
        """Gets the convertible_to_gt of this SmallBalance.  # noqa: E501

        Estimated conversion to GT  # noqa: E501

        :return: The convertible_to_gt of this SmallBalance.  # noqa: E501
        :rtype: str
        """
        return self._convertible_to_gt

    @convertible_to_gt.setter
    def convertible_to_gt(self, convertible_to_gt):
        """Sets the convertible_to_gt of this SmallBalance.

        Estimated conversion to GT  # noqa: E501

        :param convertible_to_gt: The convertible_to_gt of this SmallBalance.  # noqa: E501
        :type: str
        """

        self._convertible_to_gt = convertible_to_gt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmallBalance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmallBalance):
            return True

        return self.to_dict() != other.to_dict()
