# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.   # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class PlaceOrderResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'order_id': 'str',
        'status': 'int',
        'side': 'str',
        'gas_mode': 'str',
        'create_time': 'int',
        'amount': 'str',
        'token_address': 'str',
        'chain': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'status': 'status',
        'side': 'side',
        'gas_mode': 'gas_mode',
        'create_time': 'create_time',
        'amount': 'amount',
        'token_address': 'token_address',
        'chain': 'chain'
    }

    def __init__(self, order_id=None, status=None, side=None, gas_mode=None, create_time=None, amount=None, token_address=None, chain=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, int, str, str, int, str, str, str, Configuration) -> None
        """PlaceOrderResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._order_id = None
        self._status = None
        self._side = None
        self._gas_mode = None
        self._create_time = None
        self._amount = None
        self._token_address = None
        self._chain = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if status is not None:
            self.status = status
        if side is not None:
            self.side = side
        if gas_mode is not None:
            self.gas_mode = gas_mode
        if create_time is not None:
            self.create_time = create_time
        if amount is not None:
            self.amount = amount
        if token_address is not None:
            self.token_address = token_address
        if chain is not None:
            self.chain = chain

    @property
    def order_id(self):
        """Gets the order_id of this PlaceOrderResponse.  # noqa: E501

        Order ID  # noqa: E501

        :return: The order_id of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PlaceOrderResponse.

        Order ID  # noqa: E501

        :param order_id: The order_id of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def status(self):
        """Gets the status of this PlaceOrderResponse.  # noqa: E501

        Order Status - `0` : All - `1` : Processing - `2` : Successful - `3` : Failed - `4` : Canceled - `5` : Buy order placed but transfer not completed - `6` : Cancelled order with transfer not complete  # noqa: E501

        :return: The status of this PlaceOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlaceOrderResponse.

        Order Status - `0` : All - `1` : Processing - `2` : Successful - `3` : Failed - `4` : Canceled - `5` : Buy order placed but transfer not completed - `6` : Cancelled order with transfer not complete  # noqa: E501

        :param status: The status of this PlaceOrderResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def side(self):
        """Gets the side of this PlaceOrderResponse.  # noqa: E501

        买单或者卖单 - buy - sell  # noqa: E501

        :return: The side of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this PlaceOrderResponse.

        买单或者卖单 - buy - sell  # noqa: E501

        :param side: The side of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def gas_mode(self):
        """Gets the gas_mode of this PlaceOrderResponse.  # noqa: E501

        Trading mode affects slippage selection - `speed` : Smart mode - `custom` : Custom mode, uses `slippage` parameter  # noqa: E501

        :return: The gas_mode of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._gas_mode

    @gas_mode.setter
    def gas_mode(self, gas_mode):
        """Sets the gas_mode of this PlaceOrderResponse.

        Trading mode affects slippage selection - `speed` : Smart mode - `custom` : Custom mode, uses `slippage` parameter  # noqa: E501

        :param gas_mode: The gas_mode of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._gas_mode = gas_mode

    @property
    def create_time(self):
        """Gets the create_time of this PlaceOrderResponse.  # noqa: E501

        创建时间 (时间戳)  # noqa: E501

        :return: The create_time of this PlaceOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PlaceOrderResponse.

        创建时间 (时间戳)  # noqa: E501

        :param create_time: The create_time of this PlaceOrderResponse.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def amount(self):
        """Gets the amount of this PlaceOrderResponse.  # noqa: E501

        Trade Quantity - `side` : `buy` refers to the quote currency, i.e., `USDT` - `side` : `sell` refers to the base currency  # noqa: E501

        :return: The amount of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PlaceOrderResponse.

        Trade Quantity - `side` : `buy` refers to the quote currency, i.e., `USDT` - `side` : `sell` refers to the base currency  # noqa: E501

        :param amount: The amount of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def token_address(self):
        """Gets the token_address of this PlaceOrderResponse.  # noqa: E501

        币地址  # noqa: E501

        :return: The token_address of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address):
        """Sets the token_address of this PlaceOrderResponse.

        币地址  # noqa: E501

        :param token_address: The token_address of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._token_address = token_address

    @property
    def chain(self):
        """Gets the chain of this PlaceOrderResponse.  # noqa: E501

        Chain name  # noqa: E501

        :return: The chain of this PlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this PlaceOrderResponse.

        Chain name  # noqa: E501

        :param chain: The chain of this PlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._chain = chain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaceOrderResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlaceOrderResponse):
            return True

        return self.to_dict() != other.to_dict()
