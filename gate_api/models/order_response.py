# coding: utf-8

"""
    Gate API v4

    Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.   # noqa: E501

    Contact: support@mail.gate.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class OrderResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'order_id': 'str',
        'tx_hash': 'str',
        'side': 'str',
        'usdt_amount': 'str',
        'currency': 'str',
        'currency_amount': 'str',
        'status': 'int',
        'gas_mode': 'str',
        'chain': 'str',
        'gas_fee': 'str',
        'transaction_fee': 'str',
        'failed_reason': 'str',
        'create_time': 'int'
    }

    attribute_map = {
        'order_id': 'order_id',
        'tx_hash': 'tx_hash',
        'side': 'side',
        'usdt_amount': 'usdt_amount',
        'currency': 'currency',
        'currency_amount': 'currency_amount',
        'status': 'status',
        'gas_mode': 'gas_mode',
        'chain': 'chain',
        'gas_fee': 'gas_fee',
        'transaction_fee': 'transaction_fee',
        'failed_reason': 'failed_reason',
        'create_time': 'create_time'
    }

    def __init__(self, order_id=None, tx_hash=None, side=None, usdt_amount=None, currency=None, currency_amount=None, status=None, gas_mode=None, chain=None, gas_fee=None, transaction_fee=None, failed_reason=None, create_time=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, str, str, str, str, int, str, str, str, str, str, int, Configuration) -> None
        """OrderResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._order_id = None
        self._tx_hash = None
        self._side = None
        self._usdt_amount = None
        self._currency = None
        self._currency_amount = None
        self._status = None
        self._gas_mode = None
        self._chain = None
        self._gas_fee = None
        self._transaction_fee = None
        self._failed_reason = None
        self._create_time = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if tx_hash is not None:
            self.tx_hash = tx_hash
        if side is not None:
            self.side = side
        if usdt_amount is not None:
            self.usdt_amount = usdt_amount
        if currency is not None:
            self.currency = currency
        if currency_amount is not None:
            self.currency_amount = currency_amount
        if status is not None:
            self.status = status
        if gas_mode is not None:
            self.gas_mode = gas_mode
        if chain is not None:
            self.chain = chain
        if gas_fee is not None:
            self.gas_fee = gas_fee
        if transaction_fee is not None:
            self.transaction_fee = transaction_fee
        if failed_reason is not None:
            self.failed_reason = failed_reason
        if create_time is not None:
            self.create_time = create_time

    @property
    def order_id(self):
        """Gets the order_id of this OrderResponse.  # noqa: E501

        Order ID  # noqa: E501

        :return: The order_id of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderResponse.

        Order ID  # noqa: E501

        :param order_id: The order_id of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def tx_hash(self):
        """Gets the tx_hash of this OrderResponse.  # noqa: E501

        Transaction Hash  # noqa: E501

        :return: The tx_hash of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this OrderResponse.

        Transaction Hash  # noqa: E501

        :param tx_hash: The tx_hash of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    @property
    def side(self):
        """Gets the side of this OrderResponse.  # noqa: E501

        买单或者卖单 - buy - sell  # noqa: E501

        :return: The side of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderResponse.

        买单或者卖单 - buy - sell  # noqa: E501

        :param side: The side of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def usdt_amount(self):
        """Gets the usdt_amount of this OrderResponse.  # noqa: E501

        Amount  # noqa: E501

        :return: The usdt_amount of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._usdt_amount

    @usdt_amount.setter
    def usdt_amount(self, usdt_amount):
        """Sets the usdt_amount of this OrderResponse.

        Amount  # noqa: E501

        :param usdt_amount: The usdt_amount of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._usdt_amount = usdt_amount

    @property
    def currency(self):
        """Gets the currency of this OrderResponse.  # noqa: E501

        币  # noqa: E501

        :return: The currency of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderResponse.

        币  # noqa: E501

        :param currency: The currency of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_amount(self):
        """Gets the currency_amount of this OrderResponse.  # noqa: E501

        Currency amount  # noqa: E501

        :return: The currency_amount of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_amount

    @currency_amount.setter
    def currency_amount(self, currency_amount):
        """Sets the currency_amount of this OrderResponse.

        Currency amount  # noqa: E501

        :param currency_amount: The currency_amount of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._currency_amount = currency_amount

    @property
    def status(self):
        """Gets the status of this OrderResponse.  # noqa: E501

        Order Status - `0` : All - `1` : Processing - `2` : Successful - `3` : Failed - `4` : Canceled - `5` : Buy order placed but transfer not completed - `6` : Cancelled order with transfer not complete  # noqa: E501

        :return: The status of this OrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderResponse.

        Order Status - `0` : All - `1` : Processing - `2` : Successful - `3` : Failed - `4` : Canceled - `5` : Buy order placed but transfer not completed - `6` : Cancelled order with transfer not complete  # noqa: E501

        :param status: The status of this OrderResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def gas_mode(self):
        """Gets the gas_mode of this OrderResponse.  # noqa: E501

        Trading mode affects slippage selection - `speed` : Smart mode - `custom` : Custom mode, uses `slippage` parameter  # noqa: E501

        :return: The gas_mode of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._gas_mode

    @gas_mode.setter
    def gas_mode(self, gas_mode):
        """Sets the gas_mode of this OrderResponse.

        Trading mode affects slippage selection - `speed` : Smart mode - `custom` : Custom mode, uses `slippage` parameter  # noqa: E501

        :param gas_mode: The gas_mode of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._gas_mode = gas_mode

    @property
    def chain(self):
        """Gets the chain of this OrderResponse.  # noqa: E501

        链  # noqa: E501

        :return: The chain of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this OrderResponse.

        链  # noqa: E501

        :param chain: The chain of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def gas_fee(self):
        """Gets the gas_fee of this OrderResponse.  # noqa: E501

        Miner Fee (USDT-based)  # noqa: E501

        :return: The gas_fee of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._gas_fee

    @gas_fee.setter
    def gas_fee(self, gas_fee):
        """Sets the gas_fee of this OrderResponse.

        Miner Fee (USDT-based)  # noqa: E501

        :param gas_fee: The gas_fee of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._gas_fee = gas_fee

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this OrderResponse.  # noqa: E501

        Trading Fee (USDT-based)  # noqa: E501

        :return: The transaction_fee of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this OrderResponse.

        Trading Fee (USDT-based)  # noqa: E501

        :param transaction_fee: The transaction_fee of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._transaction_fee = transaction_fee

    @property
    def failed_reason(self):
        """Gets the failed_reason of this OrderResponse.  # noqa: E501

        Failure reason (if any)  # noqa: E501

        :return: The failed_reason of this OrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this OrderResponse.

        Failure reason (if any)  # noqa: E501

        :param failed_reason: The failed_reason of this OrderResponse.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def create_time(self):
        """Gets the create_time of this OrderResponse.  # noqa: E501

        创建时间（时间戳）  # noqa: E501

        :return: The create_time of this OrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OrderResponse.

        创建时间（时间戳）  # noqa: E501

        :param create_time: The create_time of this OrderResponse.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderResponse):
            return True

        return self.to_dict() != other.to_dict()
